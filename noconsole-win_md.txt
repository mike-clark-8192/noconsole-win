# Project: noconsole-win
(this document was generated by files2md v1.0.2). 

## File listing:
`noconsole-win/LICENSE.txt`
`noconsole-win/noconsole-common/CommandLineSplit.cs`
`noconsole-win/noconsole-common/NativeMethods.cs`
`noconsole-win/noconsole-common/noconsole-common.projitems`
`noconsole-win/noconsole-common/noconsole-common.shproj`
`noconsole-win/noconsole-common/NoConsole.cs`
`noconsole-win/noconsole-win.sln`
`noconsole-win/noconsolec/App.config`
`noconsole-win/noconsolec/noconsolec.csproj`
`noconsole-win/noconsolec/Program.cs`
`noconsole-win/noconsolec/Properties/AssemblyInfo.cs`
`noconsole-win/noconsolew/App.config`
`noconsole-win/noconsolew/noconsolew.csproj`
`noconsole-win/noconsolew/Program.cs`
`noconsole-win/noconsolew/Properties/AssemblyInfo.cs`
`noconsole-win/README.md`

## Filenames and content:

### `noconsole-win/LICENSE.txt`
```
MIT License

Copyright (c) [year] [fullname]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

```


### `noconsole-win/noconsole-common/CommandLineSplit.cs`
```csharp
﻿using System.Text.RegularExpressions;

namespace noconsole
{
    public class CommandLineSplit
    {
        public CommandLineSplit(string commandLine)
        {
            Regex regexQuoted = new Regex(@"^\s*""(?<exe>[^""]+)""(?:\s(?<arg>.+))?$");
            Regex regexUnquoted = new Regex(@"^\s*(?<exe>[^\s]+)(?:\s(?<arg>.+))?$");
            Match matchQuoted = regexQuoted.Match(commandLine);
            Match matchUnquoted = regexUnquoted.Match(commandLine);
            if (matchQuoted.Success)
            {
                FileName = matchQuoted.Groups["exe"].Value;
                Arguments = matchQuoted.Groups["arg"].Value;
            }
            else if (matchUnquoted.Success)
            {
                FileName = matchUnquoted.Groups["exe"].Value;
                Arguments = matchUnquoted.Groups["arg"].Value;
            }
            else
            {
                OK = false;
            }
        }
        public bool OK { get; set; } = true;
        public string FileName { get; set; } = "";
        public string Arguments { get; set; } = "";
    }
}

```


### `noconsole-win/noconsole-common/NativeMethods.cs`
```csharp
﻿using System;
using System.Runtime.InteropServices;
using System.Text;

namespace noconsole
{
    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct STARTUPINFO
    {
        public Int32 cb;
        public string lpReserved;
        public string lpDesktop;
        public string lpTitle;
        public Int32 dwX;
        public Int32 dwY;
        public Int32 dwXSize;
        public Int32 dwYSize;
        public Int32 dwXCountChars;
        public Int32 dwYCountChars;
        public Int32 dwFillAttribute;
        public Int32 dwFlags;
        public Int16 wShowWindow;
        public Int16 cbReserved2;
        public IntPtr lpReserved2;
        public IntPtr hStdInput;
        public IntPtr hStdOutput;
        public IntPtr hStdError;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct PROCESS_INFORMATION
    {
        public IntPtr hProcess;
        public IntPtr hThread;
        public int dwProcessId;
        public int dwThreadId;
    }

    /// <summary>
    /// Interop methods.
    /// </summary>
    public static class NativeMethods
    {
        #region Constants

        public static readonly IntPtr NullPtr = IntPtr.Zero;
        public static readonly IntPtr InvalidIntPtr = new IntPtr(-1);

        public const uint NORMAL_PRIORITY_CLASS = 0x0020;
        public const uint CREATE_NO_WINDOW = 0x08000000;
        public const Int32 STARTF_USESTDHANDLES = 0x00000100;
        public const int ERROR_SUCCESS = 0;

        #endregion

        //------------------------------------------------------------------------------
        // CloseHandle
        //------------------------------------------------------------------------------
        [DllImport("kernel32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        public static extern bool CloseHandle(IntPtr hObject);

        //------------------------------------------------------------------------------
        // CreateProcess
        //------------------------------------------------------------------------------
        [DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        public static extern bool CreateProcess
        (
            string lpApplicationName,
            [In, Out] StringBuilder lpCommandLine,
            IntPtr lpProcessAttributes,
            IntPtr lpThreadAttributes,
            [In, MarshalAs(UnmanagedType.Bool)]
            bool bInheritHandles,
            uint dwCreationFlags,
            IntPtr lpEnvironment,
            string lpCurrentDirectory,
            [In] ref STARTUPINFO lpStartupInfo,
            out PROCESS_INFORMATION lpProcessInformation
        );

        //------------------------------------------------------------------------------
        // GetCommandLine
        //------------------------------------------------------------------------------
        [DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
        public static extern IntPtr GetCommandLine();

    }

    public static class NativeMessageBox
    {
        public static uint MB_ABORTRETRYIGNORE = 0x00000002;
        public static uint MB_CANCELTRYCONTINUE = 0x00000006;
        public static uint MB_HELP = 0x00004000;
        public static uint MB_OK = 0x00000000;
        public static uint MB_OKCANCEL = 0x00000001;
        public static uint MB_RETRYCANCEL = 0x00000005;
        public static uint MB_YESNO = 0x00000004;
        public static uint MB_YESNOCANCEL = 0x00000003;

        public static uint MB_ICONEXCLAMATION = 0x00000030;
        public static uint MB_ICONWARNING = 0x00000030;
        public static uint MB_ICONINFORMATION = 0x00000040;
        public static uint MB_ICONASTERISK = 0x00000040;
        public static uint MB_ICONQUESTION = 0x00000020;
        public static uint MB_ICONSTOP = 0x00000010;
        public static uint MB_ICONERROR = 0x00000010;
        public static uint MB_ICONHAND = 0x00000010;

        public static uint MB_DEFBUTTON1 = 0x00000000;
        public static uint MB_DEFBUTTON2 = 0x00000100;
        public static uint MB_DEFBUTTON3 = 0x00000200;
        public static uint MB_DEFBUTTON4 = 0x00000300;

        public static int IDABORT = 3;
        public static int IDCANCEL = 2;
        public static int IDCONTINUE = 11;
        public static int IDIGNORE = 5;
        public static int IDNO = 7;
        public static int IDOK = 1;
        public static int IDRETRY = 4;
        public static int IDTRYAGAIN = 10;
        public static int IDYES = 6;


        //------------------------------------------------------------------------------
        // MessageBox
        //------------------------------------------------------------------------------
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        public static extern int MessageBox(IntPtr hWnd, string text, string caption, uint type);
    }
}

```


### `noconsole-win/noconsole-common/noconsole-common.projitems`
```
﻿<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <MSBuildAllProjects Condition="'$(MSBuildVersion)' == '' Or '$(MSBuildVersion)' &lt; '16.0'">$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    <HasSharedItems>true</HasSharedItems>
    <SharedGUID>d6d31882-6d29-4387-a24f-55a2f20bb63f</SharedGUID>
  </PropertyGroup>
  <PropertyGroup Label="Configuration">
    <Import_RootNamespace>noconsole_common</Import_RootNamespace>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="$(MSBuildThisFileDirectory)CommandLineSplit.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)NativeMethods.cs" />
    <Compile Include="$(MSBuildThisFileDirectory)NoConsole.cs" />
  </ItemGroup>
</Project>
```


### `noconsole-win/noconsole-common/noconsole-common.shproj`
```
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Label="Globals">
    <ProjectGuid>d6d31882-6d29-4387-a24f-55a2f20bb63f</ProjectGuid>
    <MinimumVisualStudioVersion>14.0</MinimumVisualStudioVersion>
  </PropertyGroup>
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\CodeSharing\Microsoft.CodeSharing.Common.Default.props" />
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\CodeSharing\Microsoft.CodeSharing.Common.props" />
  <PropertyGroup />
  <Import Project="noconsole-common.projitems" Label="Shared" />
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\CodeSharing\Microsoft.CodeSharing.CSharp.targets" />
</Project>

```


### `noconsole-win/noconsole-common/NoConsole.cs`
```csharp
﻿using System;
using System.Runtime.InteropServices;
using System.Text;

namespace noconsole
{
    public static class NoConsole
    {
        public static void CreateProcess(string commandLine, string prefix, bool noWindow)
        {
            var split = new CommandLineSplit(commandLine);
            if (!split.OK)
            {
                MessageBoxError("Invalid command line:\n" + commandLine);
                Environment.Exit(1);
            }
            var fileName = split.FileName;
            var arguments = split.Arguments;
            if (string.IsNullOrEmpty(arguments))
            {
                string basename = System.IO.Path.GetFileNameWithoutExtension(fileName);
                string usage = "Usage: " + basename + " <commandline>";
                MessageBoxError(usage);
                Environment.Exit(1);
            }
            STARTUPINFO si = new STARTUPINFO();
            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();
            si.cb = Marshal.SizeOf(si);

            string lpApplicationName = null;
            StringBuilder lpCommandLine = new StringBuilder(arguments);
            IntPtr lpProcessAttributes = IntPtr.Zero;
            IntPtr lpThreadAttributes = IntPtr.Zero;
            bool bInheritHandles = false;
            uint dwCreationFlags = noWindow ? NativeMethods.CREATE_NO_WINDOW : 0;
            IntPtr lpEnvironment = IntPtr.Zero;
            string lpCurrentDirectory = null;
            if (prefix != null)
            {
                lpCommandLine.Insert(0, prefix);
            }
            //MessageBox.Show(lpCommandLine.ToString(), "Info", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //Environment.Exit(0);
            bool success = NativeMethods.CreateProcess(lpApplicationName,
                lpCommandLine,
                lpProcessAttributes,
                lpThreadAttributes,
                bInheritHandles,
                dwCreationFlags,
                lpEnvironment,
                lpCurrentDirectory,
                ref si,
                out pi);
            if (!success)
            {
                MessageBoxError("CreateProcess failed: " + Marshal.GetLastWin32Error());
                Environment.Exit(1);
            }
        }

        public static void MessageBoxInfo(string message)
        {
            NativeMessageBox.MessageBox(IntPtr.Zero, message, "noconsole", NativeMessageBox.MB_OK | NativeMessageBox.MB_ICONINFORMATION);
        }

        public static void MessageBoxError(string message)
        {
            NativeMessageBox.MessageBox(IntPtr.Zero, message, "noconsole", NativeMessageBox.MB_OK | NativeMessageBox.MB_ICONERROR);
        }
    }
}
```


### `noconsole-win/noconsole-win.sln`
```xml
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.9.34728.123
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "noconsolec", "noconsolec\noconsolec.csproj", "{F37EB3C9-460A-4B4E-8F4B-28C2E961979D}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "noconsolew", "noconsolew\noconsolew.csproj", "{66448AAB-2E03-4C8F-AF5F-D008BA607FCD}"
EndProject
Project("{D954291E-2A0B-460D-934E-DC6B0785DB48}") = "noconsole-common", "noconsole-common\noconsole-common.shproj", "{D6D31882-6D29-4387-A24F-55A2F20BB63F}"
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Solution Items", "Solution Items", "{2F3C7E18-88E0-474C-B7AB-511CD9262A81}"
	ProjectSection(SolutionItems) = preProject
		README.md = README.md
	EndProjectSection
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{F37EB3C9-460A-4B4E-8F4B-28C2E961979D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{F37EB3C9-460A-4B4E-8F4B-28C2E961979D}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{F37EB3C9-460A-4B4E-8F4B-28C2E961979D}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{F37EB3C9-460A-4B4E-8F4B-28C2E961979D}.Release|Any CPU.Build.0 = Release|Any CPU
		{66448AAB-2E03-4C8F-AF5F-D008BA607FCD}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{66448AAB-2E03-4C8F-AF5F-D008BA607FCD}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{66448AAB-2E03-4C8F-AF5F-D008BA607FCD}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{66448AAB-2E03-4C8F-AF5F-D008BA607FCD}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {277222F8-379F-4840-BEE0-C07C423D9BD1}
	EndGlobalSection
	GlobalSection(SharedMSBuildProjectFiles) = preSolution
		noconsole-common\noconsole-common.projitems*{66448aab-2e03-4c8f-af5f-d008ba607fcd}*SharedItemsImports = 4
		noconsole-common\noconsole-common.projitems*{d6d31882-6d29-4387-a24f-55a2f20bb63f}*SharedItemsImports = 13
		noconsole-common\noconsole-common.projitems*{f37eb3c9-460a-4b4e-8f4b-28c2e961979d}*SharedItemsImports = 4
	EndGlobalSection
EndGlobal

```


### `noconsole-win/noconsolec/App.config`
```
﻿<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6" />
    </startup>
</configuration>
```


### `noconsole-win/noconsolec/noconsolec.csproj`
```xml
﻿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{F37EB3C9-460A-4B4E-8F4B-28C2E961979D}</ProjectGuid>
    <OutputType>WinExe</OutputType>
    <RootNamespace>noconsole</RootNamespace>
    <AssemblyName>noconsolec</AssemblyName>
    <TargetFrameworkVersion>v4.6</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <Deterministic>true</Deterministic>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup>
    <StartupObject />
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="Microsoft.CSharp" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="App.config" />
  </ItemGroup>
  <Import Project="..\noconsole-common\noconsole-common.projitems" Label="Shared" />
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PostBuildEvent>if exist "%25POSTBUILD_UTILS_DIR%25" copy "$(TargetPath)" "%25POSTBUILD_UTILS_DIR%25"</PostBuildEvent>
  </PropertyGroup>
</Project>
```


### `noconsole-win/noconsolec/Program.cs`
```csharp
﻿using System;
using System.Runtime.InteropServices;

namespace noconsole
{

    public class Program
    {
        static void Main(string[] args)
        {
            string windowsDir = Environment.GetFolderPath(Environment.SpecialFolder.Windows);
            string cmdExe = System.IO.Path.Combine(windowsDir, "System32\\cmd.exe");
            string prefix = cmdExe + " /c ";
            IntPtr gclIntPtr = NativeMethods.GetCommandLine();
            string commandLine = Marshal.PtrToStringAuto(gclIntPtr);
            NoConsole.CreateProcess(commandLine, prefix, true);
        }
    }
}

```


### `noconsole-win/noconsolec/Properties/AssemblyInfo.cs`
```csharp
﻿using System.Reflection;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("noconsole-cmd")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("noconsole-cmd")]
[assembly: AssemblyCopyright("Copyright ©  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("f37eb3c9-460a-4b4e-8f4b-28c2e961979d")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

```


### `noconsole-win/noconsolew/App.config`
```
﻿<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6" />
    </startup>
</configuration>
```


### `noconsole-win/noconsolew/noconsolew.csproj`
```xml
﻿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{66448AAB-2E03-4C8F-AF5F-D008BA607FCD}</ProjectGuid>
    <OutputType>WinExe</OutputType>
    <RootNamespace>noconsolew</RootNamespace>
    <AssemblyName>noconsolew</AssemblyName>
    <TargetFrameworkVersion>v4.6</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <Deterministic>true</Deterministic>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup>
    <StartupObject />
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="Microsoft.CSharp" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="App.config" />
  </ItemGroup>
  <Import Project="..\noconsole-common\noconsole-common.projitems" Label="Shared" />
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <PostBuildEvent>if exist "%25POSTBUILD_UTILS_DIR%25" copy "$(TargetPath)" "%25POSTBUILD_UTILS_DIR%25"</PostBuildEvent>
  </PropertyGroup>
</Project>
```


### `noconsole-win/noconsolew/Program.cs`
```csharp
﻿using System;
using System.Runtime.InteropServices;

namespace noconsole
{
    public class Program
    {
        static void Main(string[] args)
        {
            IntPtr gclIntPtr = NativeMethods.GetCommandLine();
            string commandLine = Marshal.PtrToStringAuto(gclIntPtr);
            NoConsole.CreateProcess(commandLine, null, true);
        }
    }
}

```


### `noconsole-win/noconsolew/Properties/AssemblyInfo.cs`
```csharp
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("noconsolew")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("noconsolew")]
[assembly: AssemblyCopyright("Copyright ©  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("66448aab-2e03-4c8f-af5f-d008ba607fcd")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

```


### `noconsole-win/README.md`
````markdown
# noconsole-win

Launch console programs without displaying console windows (on Windows).
This is done by calling win32's CreateProcess function with the `CREATE_NO_WINDOW` flag.

## noconsolec
Usage: `noconsolec.exe <commandline>`

Executes: 
```
%windir%\system32\cmd.exe /c <commandline>
```

## noconsolew
Usage: `noconsolew.exe <commandline>`

Executes: 
```
<commandline>
```

## Common behavior
* Uses win32's MessageBox() to display detected errors.
* Retrieves <commandline> via `GetCommandLineW()` to minimize commandline quoting/escaping quirks.

````

